import { writable } from 'svelte/store';
import type { Node, Edge } from '@xyflow/svelte';

interface ComponentParameters {
	[key: string]: any;
}

// Component data types
export interface ResistorData {
	label: string;
	parameters: {
		resistance: string;
		tolerance: string;
	};
}

export interface CapacitorData {
	label: string;
	parameters: {
		capacitance: string;
		voltage: string;
	};
}

export interface InductorData {
	label: string;
	parameters: {
		inductance: string;
		current: string;
	};
}

export interface VoltageSourceData {
	label: string;
	parameters: {
		voltage: string;
		type: string;
	};
}

export interface DiodeData {
	label: string;
	parameters: {
		type: string;
	};
}

export interface TransistorData {
	label: string;
	parameters: {
		type: string;
		configuration: string;
	};
}

export interface OpAmpData {
	label: string;
	parameters: {
		type: string;
		gain: string;
		supply: string;
	};
}

export interface GroundData {
	label: string;
	parameters: {};
}

interface CircuitComponent {
	id: string;
	type: string;
	parameters: ComponentParameters;
	position: { x: number; y: number };
	connections: { [portName: string]: string[] };
}

interface CircuitData {
	modules: {
		[moduleName: string]: {
			ports: {
				[portName: string]: {
					direction: 'input' | 'output';
					bits: (number | string)[];
				};
			};
			cells: {
				[cellName: string]: {
					type: string;
					parameters: ComponentParameters;
					port_directions: {
						[portName: string]: 'input' | 'output';
					};
					connections: {
						[portName: string]: (number | string)[];
					};
				};
			};
		};
	};
}

function createCircuitStore() {
	const { subscribe, set, update } = writable<{
		nodes: Node[];
		edges: Edge[];
		circuitData: CircuitData;
	}>({
		nodes: [],
		edges: [],
		circuitData: {
			modules: {
				main: {
					ports: {},
					cells: {}
				}
			}
		}
	});

	return {
		subscribe,
		addComponent: (type: string, position: { x: number; y: number }) => {
			// Snap to grid for better alignment
			const snappedPosition = {
				x: Math.round(position.x / 10) * 10,
				y: Math.round(position.y / 10) * 10
			};

			const id = `${type}_${Date.now()}`;
			const newNode: Node = {
				id,
				type,
				position: snappedPosition,
				data: { 
					label: type,
					parameters: getDefaultParameters(type)
				}
			};
			
			update(store => ({
				...store,
				nodes: [...store.nodes, newNode]
			}));
		},
		updateComponent: (id: string, parameters: ComponentParameters) => {
			update(store => ({
				...store,
				nodes: store.nodes.map(node => 
					node.id === id 
						? { ...node, data: { ...node.data, parameters } }
						: node
				)
			}));
		},
		updateNodePosition: (nodeId: string, position: { x: number; y: number }) => {
			update(store => ({
				...store,
				nodes: store.nodes.map(node =>
					node.id === nodeId
						? { ...node, position }
						: node
				)
			}));
		},
		removeComponent: (id: string) => {
			update(store => ({
				...store,
				nodes: store.nodes.filter(node => node.id !== id),
				edges: store.edges.filter(edge => 
					edge.source !== id && edge.target !== id
				)
			}));
		},
		addConnection: (edge: Edge) => {
			update(store => ({
				...store,
				edges: [...store.edges, edge]
			}));
		},
		removeConnection: (edgeId: string) => {
			update(store => ({
				...store,
				edges: store.edges.filter(edge => edge.id !== edgeId)
			}));
		},
		updateWireStyle: (edgeId: string, wireShape: string, wireStyle?: string, color?: string) => {
			update(store => ({
				...store,
				edges: store.edges.map(edge =>
					edge.id === edgeId
						? {
							...edge,
							data: {
								...edge.data,
								wireShape,
								...(wireStyle && { wireStyle }),
								...(color && { color })
							}
						}
						: edge
				)
			}));
		},
		exportNetlist: () => {
			let state: any;
			subscribe(s => state = s)();
			
			if (!state) return '';
			
			const netlist: string[] = [];
			netlist.push('* Circuit Netlist Generated by Saffron Circuit Simulator');
			netlist.push('');
			
			// Add components
			state.nodes.forEach((node: any) => {
				const { id, type, data } = node;
				const params = data.parameters;
				
				switch (type) {
					case 'resistor':
						netlist.push(`R${id} n1_${id} n2_${id} ${params.resistance}`);
						break;
					case 'capacitor':
						netlist.push(`C${id} n1_${id} n2_${id} ${params.capacitance}`);
						break;
					case 'inductor':
						netlist.push(`L${id} n1_${id} n2_${id} ${params.inductance}`);
						break;
					case 'voltageSource':
						netlist.push(`V${id} n1_${id} n2_${id} ${params.voltage}`);
						break;
					case 'diode':
						netlist.push(`D${id} n1_${id} n2_${id} ${params.type}`);
						break;
					case 'transistor':
						netlist.push(`Q${id} nc_${id} nb_${id} ne_${id} ${params.type}`);
						break;
					case 'opamp':
						netlist.push(`X${id} nin_${id} nip_${id} nout_${id} nvcc_${id} nvee_${id} ${params.type}`);
						break;
					case 'ground':
						netlist.push(`* Ground reference at ${id}`);
						break;
				}
			});
			
			netlist.push('');
			netlist.push('.end');
			
			return netlist.join('\n');
		},
		exportJSON: () => {
			let state: any;
			subscribe(s => state = s)();
			return state ? JSON.stringify(state.circuitData, null, 2) : '{}';
		},
		clear: () => {
			set({
				nodes: [],
				edges: [],
				circuitData: {
					modules: {
						main: {
							ports: {},
							cells: {}
						}
					}
				}
			});
		}
	};
}


function getDefaultParameters(type: string): ComponentParameters {
    switch (type) {
        case 'resistor':
            return { 
                resistance: '1k', 
                tolerance: '5%', 
                power: '0.25W', 
                temperature_coefficient: '100' 
            };
        case 'capacitor':
            return { 
                capacitance: '1μ', 
                voltage: '25V', 
                type: 'Ceramic', 
                esr: '0.1' 
            };
        case 'inductor':
            return { 
                inductance: '1m', 
                current: '1A', 
                dcr: '1', 
                core_material: 'Ferrite' 
            };
        case 'voltageSource':
            return { 
                voltage: '5V', 
                type: 'DC', 
                frequency: '60', 
                phase: 0 
            };
        case 'currentSource':
            return { 
                current: '1A', 
                type: 'DC' 
            };
        case 'diode':
            return { 
                type: '1N4148', 
                forwardVoltage: '0.7', 
                current: '200m', 
                reverse_voltage: '100' 
            };
        case 'transistor':
            return { 
                type: '2N3904', 
                configuration: 'NPN', 
                beta: 100, 
                vce_sat: '0.2' 
            };
        case 'opamp':
            return { 
                type: 'LM741', 
                gain: '100k', 
                supply: '±15V', 
                gainBandwidth: '1M', 
                slew_rate: '0.5' 
            };
        case 'ground':
            return { 
                type: 'Earth', 
                impedance: '0', 
                plane_area: 'Large', 
                via_count: 4 
            };
        case 'voltmeter':
            return { 
                range: '10V', 
                impedance: '10M', 
                accuracy: '1%' 
            };
        case 'ammeter':
            return { 
                range: '1A', 
                resistance: '0.1' 
            };
        case 'probe':
            return { 
                impedance: '1M', 
                capacitance: '10p', 
                attenuation: '1x' 
            };
        default:
            return {};
    }
}


export const circuitStore = createCircuitStore();
